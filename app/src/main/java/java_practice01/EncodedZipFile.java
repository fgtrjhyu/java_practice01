/*
 * This source file was generated by the Gradle 'init' task
 */
package java_practice01;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.zip.ZipFile;
import java.util.Optional;
import java.util.Arrays;
import java.util.zip.ZipException;
import java.util.function.Function;

/**
 * Represents an encoded zip file.
 * This class provides methods to create an instance of an encoded zip file and
 * perform operations on it.
 */
public record EncodedZipFile(ZipFile zipFile, Charset charset, File file) {

    /**
     * Returns an Optional containing the Charset for the given charsetName, if it
     * is supported.
     * 
     * @param charsetName the name of the charset
     * @return an Optional containing the Charset for the given charsetName, or an
     *         empty Optional if the charset is not supported
     */
    private static Optional<Charset> forName(String charsetName) {
        try {
            return Optional.of(Charset.forName(charsetName));
        } catch (Exception e) {
            return Optional.empty();
        }
    }

    /**
     * Creates an instance of EncodedZipFile with the specified charset and file.
     * This method checks the charset for zip entries.
     *
     * @param charset The charset to use for decoding the zip file entries.
     * @param file    The file representing the zip file.
     * @return An instance of EncodedZipFile.
     * @throws IOException If an I/O error occurs while reading the zip file.
     * @param ZipException             If a zip error occurs while reading the zip
     *                                 file.
     * @param IllegalArgumentException If invalid charset or file is null.
     */
    public static EncodedZipFile of(Charset charset, File file) throws IOException, ZipException {
        var zipFile = new ZipFile(file, charset);
        for (var entries = zipFile.entries(); entries.hasMoreElements();) {
            entries.nextElement();
        }
        return new EncodedZipFile(zipFile, charset, file);
    }

    /**
     * Creates an Optional instance of EncodedZipFile with the specified charset and
     * file.
     * This method checks the charset for zip entries.
     *
     * @param charset The charset to use for decoding the zip file entries.
     * @param file    The file representing the zip file.
     * @return An Optional instance of EncodedZipFile if the zip file is
     *         successfully read, otherwise an empty Optional.
     */
    public static Optional<EncodedZipFile> ofOptional(Charset charset, File file) {
        try {
            return Optional.of(of(charset, file));
        } catch (Exception e) {
            return Optional.empty();
        }
    }

    /**
     * Creates an Optional<EncodedZipFile> from the given file and charset names.
     *
     * @param file         the file to create the EncodedZipFile from
     * @param charsetNames the names of the charsets to use for decoding the file
     * @return an Optional containing the EncodedZipFile if it was successfully
     *         created, or an empty Optional otherwise
     */
    public static Optional<EncodedZipFile> findFirstOfOptional(File file, String... charsetNames) {
        return Arrays.asList(charsetNames)
                .stream()
                .map(charsetName -> forName(charsetName)
                        .flatMap(charset -> ofOptional(charset, file)))
                .filter(Optional::isPresent)
                .findFirst()
                .flatMap(Function.identity());
    }

    /**
     * Constructs a new EncodedZipFile instance with the specified zip file,
     * charset, and file.
     * This constructor validates the arguments and throws an
     * IllegalArgumentException if any of them are null.
     *
     * @param zipFile The ZipFile instance representing the zip file.
     * @param charset The charset used for decoding the zip file entries.
     * @param file    The file representing the zip file.
     * @throws IllegalArgumentException If zipFile, charset, or file is null.
     */
    public EncodedZipFile {
        if (zipFile == null) {
            throw new IllegalArgumentException("zipFile is null");
        }
        if (charset == null) {
            throw new IllegalArgumentException("charset is null");
        }
        if (file == null) {
            throw new IllegalArgumentException("file is null");
        }
    }
}
